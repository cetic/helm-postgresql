---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "postgresql.fullname" . }}
  labels:
    app: {{ include "postgresql.name" . }}
    chart: {{ template "postgresql.chart" . }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  serviceName: {{ template "postgresql.fullname" . }}-headless
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "postgresql.name" . }}
      release: {{ .Release.Name | quote }}
  template:
    metadata:
      name: {{ template "postgresql.fullname" . }}
      labels:
        app: {{ include "postgresql.name" . | quote }}
        chart: {{ template "postgresql.chart" . }}
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }} {{- end }}
      {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
      initContainers:
      - name: init-chmod-data
        image: "{{ .Values.volumePermissions.image.repository }}:{{ .Values.volumePermissions.image.tag }}"
        imagePullPolicy: "{{ .Values.volumePermissions.image.pullPolicy }}"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        command:
          - sh
          - -c
          - |
            mkdir -p {{ .Values.persistence.mountPath }}/data
            chmod 700 {{ .Values.persistence.mountPath }}/data
            find {{ .Values.persistence.mountPath }} -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              xargs chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }}
        securityContext:
          runAsUser: {{ .Values.volumePermissions.securityContext.runAsUser }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
          subPath: {{ .Values.persistence.subPath }}
      {{- end }}
      containers:
      - name: {{ template "postgresql.fullname" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
      {{- if and .Values.postgresql.pghba .Values.postgresql.config}}
        args: ["-c", "config_file={{ .Values.persistence.mountPath }}/conf/postgresql.conf", "-c", "hba_file={{ .Values.persistence.mountPath }}/conf/pg_hba.conf"]
      {{- end }}
      {{- if and (not .Values.postgresql.pghba) .Values.postgresql.config}}
        args: ["-c", "config_file={{ .Values.persistence.mountPath }}/conf/postgresql.conf"]
      {{- end }}
      {{- if and .Values.postgresql.pghba (not .Values.postgresql.config)}}
        args: ["-c", "hba_file={{ .Values.persistence.mountPath }}/conf/pg_hba.conf"]
      {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: POSTGRES_PASSWORD
          value: {{ .Values.postgresql.password | quote }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.username | quote }}
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.database | quote }}
        {{- if .Values.postgresql.initdbArgs }}
        - name: POSTGRES_INITDB_ARGS
          value: {{ .Values.postgresql.initdbArgs | quote }}
        {{- end }}
        {{- if .Values.postgresql.initdbWalDir }}
        - name: POSTGRES_INITDB_WALDIR
          value: {{ .Values.postgresql.initdbWalDir | quote }}
        {{- end }}
        {{- if .Values.persistence.mountPath }}
        - name: PGDATA
          value: {{ .Values.postgresql.dataDir | quote }}
        {{- end }}
{{- if .Values.extraEnv }}
{{ tpl (toYaml .Values.extraEnv) $ | indent 8 }}
{{- end }}
        ports:
        - name: postgresql
          containerPort: {{ .Values.postgresql.port }}
        livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
        readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
        volumeMounts:
        {{- if .Values.persistence.enabled }}
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}/data
          subPath: {{ .Values.persistence.subPath }}
          readOnly: false
        {{- end }}
        {{- if or (.Files.Glob "configs/pg_hba.conf") .Values.postgresql.pghba .Values.configMap }}
        - name: postgresql-config-pghba
          mountPath: {{ .Values.persistence.mountPath }}/conf/pg_hba.conf
          subPath: pg_hba.conf
          readOnly: false
        {{- end }}
        {{- if or (.Files.Glob "configs/initdbscripts.sh") .Values.postgresql.initdbscripts .Values.configMap }}
        - name: postgresql-config-initdbscripts
          mountPath: /docker-entrypoint-initdb.d/initdbscripts.sh
          subPath: initdbscripts.sh
          readOnly: false
        {{- end }}
        {{- if or (.Files.Glob "configs/postgresql.conf") .Values.postgresql.config .Values.configMap }}
        - name: postgresql-config
          mountPath: {{ .Values.persistence.mountPath }}/conf/postgresql.conf
          subPath: postgresql.conf
          readOnly: false
        {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.nodeName }}
      nodeName: {{ .Values.nodeName | quote }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      volumes:
      {{- if or (.Files.Glob "configs/pg_hba.conf") .Values.postgresql.pghba .Values.postgresql.configMap}}
      - name: postgresql-config-pghba
        configMap:
          name: {{ template "postgresql.fullname" . }}-configuration
          items:
           - key: pg_hba.conf
             path: pg_hba.conf
      {{- end }}
      {{- if or (.Files.Glob "configs/postgresql.conf") .Values.postgresql.config .Values.postgresql.configMap}}
      - name: postgresql-config
        configMap:
          name: {{ template "postgresql.fullname" . }}-configuration
          items:
           - key: postgresql.conf
             path: postgresql.conf
      {{- end }}
      {{- if or (.Files.Glob "configs/initdbscripts.sh") .Values.postgresql.initdbscripts .Values.postgresql.configMap}}
      - name: postgresql-config-initdbscripts
        configMap:
          name: {{ template "postgresql.fullname" . }}-configuration
          items:
           - key: initdbscripts.sh
             path: initdbscripts.sh
      {{- end }}
{{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
      - name: data
        persistentVolumeClaim:
{{- with .Values.persistence.existingClaim }}
          claimName: {{ tpl . $ }}
{{- end }}
{{- else if not .Values.persistence.enabled }}
      - name: data
        emptyDir: {}
{{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- with .Values.persistence.storageClass }}
        storageClassName: {{ tpl . $ }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}
